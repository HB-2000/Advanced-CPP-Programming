# تمرین پیاده‌سازی کلاس: مدیریت اطلاعات دانشجو

این سوال برای تمرین مفاهیم شیءگرایی و پیاده‌سازی کلاس در زبان C++ طراحی شده است.

- **محدودیت زمان**: ۱ ثانیه
- **محدودیت حافظه**: ۲۵۶ مگابایت

---

## شرح مسئله

شما باید یک سیستم ساده برای مدیریت اطلاعات دانشجویان طراحی کنید. برای این منظور، باید یک کلاس به نام `Student` پیاده‌سازی کنید که اطلاعات یک دانشجو (شامل نام، شماره دانشجویی و معدل) را ذخیره کند و امکان انجام عملیات‌های متنوعی را فراهم کند.

### مشخصات کلاس `Student`

کلاس `Student` باید شامل ویژگی‌ها و متدهای زیر باشد:

#### ویژگی‌ها
- `name`: نام دانشجو (رشته، بدون فاصله).
- `studentId`: شماره دانشجویی (عدد صحیح).
- `gpa`: معدل دانشجو (عدد اعشاری بین 0 تا 20).

#### سازنده
- یک سازنده که نام، شماره دانشجویی و معدل اولیه را دریافت کرده و ویژگی‌ها را مقداردهی کند.

#### مخرب
- یک مخرب که پیامی با فرمت `"Student with ID X is being deleted."` چاپ کند، که `X` شماره دانشجویی است.

#### متدها
- `updateGpa`: معدل دانشجو را با یک مقدار جدید به‌روزرسانی کند (فقط اگر مقدار جدید بین 0 تا 20 باشد) و پیام مناسب چاپ کند.
- `isPassing`: بررسی کند که آیا دانشجو قبول است یا خیر و پیام مناسب چاپ کند.
- `addBonusGpa`: مقداری به معدل اضافه کند (اگر معتبر باشد) و پیام مناسب چاپ کند.
- `resetStudent`: نام و معدل را به مقادیر پیش‌فرض بازنشانی کند و پیام مناسب چاپ کند.
- `compareGpa`: معدل را با یک مقدار ورودی مقایسه کند و پیام مناسب چاپ کند.

#### متدهای Getter و Setter
- متدهای getter برای دریافت مقادیر `name`، `studentId` و `gpa`.
- متدهای setter برای تنظیم مقادیر `name` و `gpa` (برای `studentId` setter لازم نیست).

### وظیفه شما
برنامه‌ای بنویسید که:
1. یک کلاس `Student` با مشخصات بالا پیاده‌سازی کند.
2. یک شیء از کلاس `Student` با مقادیر اولیه‌ای که از ورودی دریافت می‌شود، ایجاد کند.
3. عملیاتی (به‌روزرسانی معدل، بررسی وضعیت قبولی، افزودن جایزه، بازنشانی یا مقایسه معدل) را بر اساس ورودی انجام دهد.
4. برای هر عملیات، پیام مناسب مرتبط با متد چاپ شود.

---

## ورودی

ورودی شامل چند خط است:
- **خط اول**: شامل سه مقدار است:
  - نام دانشجو (رشته بدون فاصله).
  - شماره دانشجویی (عدد صحیح).
  - معدل اولیه (عدد اعشاری).
- **خط دوم**: شامل یک عدد صحیح $q$ که تعداد عملیات را نشان می‌دهد.
- **$q$ خط بعدی**: هر خط یک عملیات را مشخص می‌کند:
  - $op = 1$: شامل عدد $1$ و یک عدد اعشاری $newGpa$ (به‌روزرسانی معدل با متد `updateGpa`).
  - $op = 2$: شامل عدد $2$ (بررسی وضعیت قبولی با متد `isPassing`).
  - $op = 3$: شامل عدد $3$ و یک عدد اعشاری $bonus$ (افزودن جایزه به معدل با متد `addBonusGpa`).
  - $op = 4$: شامل عدد $4$ (بازنشانی اطلاعات با متد `resetStudent`).
  - $op = 5$: شامل عدد $5$ و یک عدد اعشاری $value$ (مقایسه معدل با متد `compareGpa`).

**محدودیت‌ها**:
- $1 \le \text{studentId} \le 10^6$
- $0 \le \text{gpa}, \text{newGpa}, \text{bonus}, \text{value} \le 20$
- $1 \le q \le 100$

---

## خروجی

برای هر عملیات ($op = 1, 2, 3, 4, 5$)، پیام مناسب مرتبط با متد چاپ شود:
- برای $op = 1$:
  - اگر معدل به‌روزرسانی شود: `"GPA updated to X."` (X معدل جدید با ۲ رقم اعشار).
  - در غیر این صورت: `"Invalid GPA value."`
- برای $op = 2$:
  - اگر معدل $\ge 12$: `"Student is passing."`
  - در غیر این صورت: `"Student is failing."`
- برای $op = 3$:
  - اگر جایزه اضافه شود: `"Bonus added, new GPA is X."` (X معدل جدید با ۲ رقم اعشار).
  - در غیر این صورت: `"Invalid bonus value or exceeds GPA limit."`
- برای $op = 4$:
  - همیشه: `"Student data reset, GPA is 0."`
- برای $op = 5$:
  - بسته به مقایسه: `"GPA is less than X."`, `"GPA is equal to X."`, یا `"GPA is greater than X."` (X مقدار ورودی با ۲ رقم اعشار).

در انتها، پیام مخرب (`"Student with ID X is being deleted."`) چاپ می‌شود.

---

## مثال‌ها

### مثال ۱

**ورودی**:
```
Ali 12345 15.5
5
1 16.75
2
3 1.5
4
5 10.0
```

**خروجی**:
```
GPA updated to 16.75.
Student is passing.
Bonus added, new GPA is 18.25.
Student data reset, GPA is 0.
GPA is less than 10.00.
Student with ID 12345 is being deleted.
```

**توضیحات**:
- دانشجویی با نام `Ali`، شماره دانشجویی `12345` و معدل اولیه `15.5` ایجاد می‌شود.
- عملیات‌ها:
  - $op = 1, newGpa = 16.75$: معدل به `16.75` به‌روزرسانی می‌شود.
  - $op = 2$: معدل `16.75` است، دانشجو قبول است.
  - $op = 3, bonus = 1.5$: معدل به `18.25` افزایش می‌یابد.
  - $op = 4$: معدل به `0` بازنشانی می‌شود.
  - $op = 5, value = 10.0$: معدل `0` با `10.0` مقایسه می‌شود.
- خروجی: پنج خط برای پنج عملیات، به علاوه پیام مخرب.

### مثال ۲

**ورودی**:
```
Sara 67890 11.0
4
3 10.0
2
1 21.0
5 11.0
```

**خروجی**:
```
Invalid bonus value or exceeds GPA limit.
Student is failing.
Invalid GPA value.
GPA is equal to 11.00.
Student with ID 67890 is being deleted.
```

**توضیحات**:
- دانشجویی با نام `Sara`، شماره دانشجویی `67890` و معدل اولیه `11.0` ایجاد می‌شود.
- عملیات‌ها:
  - $op = 3, bonus = 10.0$: معدل به `21.0` می‌رسد که نامعتبر است.
  - $op = 2$: معدل `11.0` است، دانشجو مردود است.
  - $op = 1, newGpa = 21.0$: مقدار نامعتبر است.
  - $op = 5, value = 11.0$: معدل `11.0` با `11.0` مقایسه می‌شود.
- خروجی: چهار خط برای چهار عملیات، به علاوه پیام مخرب.

---

## نکات
- اگر مقدار $newGpa$ یا $bonus$ خارج از محدوده $[0, 20]$ باشد یا باعث شود معدل از 20 بیشتر شود، پیام خطا چاپ شود.
- هر عملیات باید پیام مناسب متد را چاپ کند.
- از استاندارد C++11 یا بالاتر استفاده کنید.
- پیام مخرب باید در انتهای خروجی چاپ شود و در تست‌کیس‌ها لحاظ شود.